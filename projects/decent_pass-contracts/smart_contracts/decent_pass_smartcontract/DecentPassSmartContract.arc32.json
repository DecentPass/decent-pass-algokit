{
    "hints": {
        "register_user(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_validator(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_user(uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_stake(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "retrieve_profile(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "penalty_validator(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "adjust_validator_reward(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGVjZW50X3Bhc3Nfc21hcnRjb250cmFjdC5jb250cmFjdC5EZWNlbnRQYXNzU21hcnRDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DecentPassSmartContract",
        "methods": [
            {
                "name": "register_user",
                "args": [
                    {
                        "type": "uint64",
                        "name": "user_id"
                    },
                    {
                        "type": "string",
                        "name": "profile_data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Registers a user profile by storing their user ID and profile data in a BoxMap."
            },
            {
                "name": "assign_validator",
                "args": [
                    {
                        "type": "account",
                        "name": "validator"
                    },
                    {
                        "type": "uint64",
                        "name": "stake_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows a validator to stake tokens and participate in the verification process."
            },
            {
                "name": "verify_user",
                "args": [
                    {
                        "type": "uint64",
                        "name": "user_id"
                    },
                    {
                        "type": "account",
                        "name": "validator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows a validator to verify a user profile. Increases the validator's rewards or penalties\nbased on the accuracy of verification, to be handled later."
            },
            {
                "name": "claim_stake",
                "args": [
                    {
                        "type": "account",
                        "name": "validator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows a validator to claim their stake along with accumulated rewards minus penalties."
            },
            {
                "name": "retrieve_profile",
                "args": [
                    {
                        "type": "uint64",
                        "name": "user_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Returns the profile data for a given user ID, allowing validators to view profiles."
            },
            {
                "name": "penalty_validator",
                "args": [
                    {
                        "type": "account",
                        "name": "validator"
                    },
                    {
                        "type": "uint64",
                        "name": "penalty_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Imposes a penalty on a validator for inaccurate verification."
            },
            {
                "name": "adjust_validator_reward",
                "args": [
                    {
                        "type": "account",
                        "name": "validator"
                    },
                    {
                        "type": "uint64",
                        "name": "reward_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Increases a validator's reward by the specified reward amount."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}